"""payments_and_commissions

Revision ID: 25863bdf9300
Revises: 9c111eecaeea
Create Date: 2023-09-20 16:31:38.741138

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "25863bdf9300"
down_revision = "9c111eecaeea"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "commissions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("job_id", sa.Integer(), nullable=False),
        sa.Column(
            "commission_status",
            sa.Enum(
                "REQUESTED",
                "SENT",
                "CONFIRM",
                "UNPAID",
                "DENY",
                "PAID",
                name="commissionstatus",
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["job_id"], ["jobs.id"], name=op.f("fk_commissions_job_id_jobs")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_commissions")),
    )
    op.create_index(op.f("ix_commissions_uuid"), "commissions", ["uuid"], unique=True)
    op.create_table(
        "payments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("uuid", sa.String(length=36), nullable=False),
        sa.Column("job_id", sa.Integer(), nullable=False),
        sa.Column(
            "payment_status",
            sa.Enum(
                "REQUESTED",
                "SENT",
                "UNPAID",
                "DENY",
                "CONFIRM",
                "PAID",
                name="paymentstatus",
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["job_id"], ["jobs.id"], name=op.f("fk_payments_job_id_jobs")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_payments")),
    )
    op.create_index(op.f("ix_payments_uuid"), "payments", ["uuid"], unique=True)
    op.drop_column("jobs", "commission_confirmation_at")
    op.drop_column("jobs", "payment_unpaid_at")
    op.drop_column("jobs", "commission_approved_at")
    op.drop_column("jobs", "commission_sent_at")
    op.drop_column("jobs", "payment_paid_at")
    op.drop_column("jobs", "commission_denied_at")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "jobs",
        sa.Column(
            "commission_denied_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "jobs",
        sa.Column(
            "payment_paid_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "jobs",
        sa.Column(
            "commission_sent_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "jobs",
        sa.Column(
            "commission_approved_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "jobs",
        sa.Column(
            "payment_unpaid_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "jobs",
        sa.Column(
            "commission_confirmation_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index(op.f("ix_payments_uuid"), table_name="payments")
    op.drop_table("payments")
    op.drop_index(op.f("ix_commissions_uuid"), table_name="commissions")
    op.drop_table("commissions")
    # ### end Alembic commands ###
